#!/usr/bin/env ruby

require 'rubygems'
require 'yaml'
require 'optparse'

class TellMeWhen
  RC_FILE = "#{ENV['HOME']}/.tellmewhenrc"

  def initialize
  end

  def load_settings
    @settings ||= {
      'notify-via' => 'email',
      'email' => {
         'to'   => "#{ENV['LOGNAME']}@#{`hostname`.chomp}",
         'from' => "#{ENV['LOGNAME']}@#{`hostname`.chomp}",
      }
    }

    if File.exist? RC_FILE
      settings = YAML.load_file RC_FILE
      @settings = @settings.merge(settings)
      puts "Loaded Settings: #{@settings.inspect}"
    end
  end

  def save_settings
    if ! File.exist? RC_FILE
      File.open(RC_FILE, "w") do |f|
        f.write @settings.to_yaml
      end
    end
  end

  def parse_options
    @options = {}
    OptionParser.new do |opts|
      opts.banner = "Usage: #$0 command args..."

      opts.on("-v","--[no-]verbose", "Run Verbosely.") do |v|
        options[:verbose] = v
      end
    end.parse!

    puts "Options: #{@options.inspect}"
  end

  def self.main args
    app = self.new
    app.parse_options
    app.load_settings
    app.save_settings
    exit app.run args
  end

  def run args
    @command = args
    puts "Use optparse"
    puts "Error if no 'other' command was passed"
    puts "capture the other command's stdout/stderr"
    puts "redirect the other command's stdin"
    puts "time the start and end of the other command"
    puts "tell me: based on configuration: email (in the future: IM, Popup Dialog, wall, growl, any/all of these)"
    return 1
  end
end

if $0 == __FILE__
  TellMeWhen.main(ARGV)
end
